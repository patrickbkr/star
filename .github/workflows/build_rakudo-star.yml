# This workflow enforces always the "Rakodo latest" release as the basis for the to-build Star release
# As we always work with TAGs, the two build tools could get the TAG as a parameter and then build this relaase instead of always building "Rakudo latest"
#  Will enhance the workflow later to getr a TAG as an input

name: Build Rakudo Star Releases (Windows MSI and Linux RSTAR source)

# Create triggers the workflow on new tag's or branches
on:
  create: #[push, create, workflow_dispatch]
    tags:
    - 2[0-9]+.[0-1][0-1]'**'
  workflow_dispatch:

jobs:
  build_Rakudo-Star_Windows_MSI_package:
    # Windows-latest doesn't work since it's 2022. We need to fall back to windows-2019
    runs-on: windows-2019
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v3
      - name: Run the build-with-choco.ps1 script
        run: pwsh -command ".\$GITHUB_WORKSPACE\tools\build\binary-release\Windows\build-with-choco.ps1"
      - name: List my stuff
        run: Get-ChildItem -Exclude ".git" -Recurse
      - name: Upload Rakudo-Star Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: tools/build/binary-release/Windows/*
          if-no-files-found: error
          
  build_Rakudo-Star_Linux_source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo apt update
          sudo apt install -y cpanminus curl gcc make
          cpanm -v ExtUtils::Command Pod::Usage
      - name: Collect RSTAR System Informations
        env:
          RSTAR_DEBUG: "1"
        run: ./bin/rstar sysinfo
      - name: Fetch RSTAR Components
        run: ./bin/rstar fetch -l
      - name: Create RSTAR Distrubution
        run: ./bin/rstar dist
      - name: List my stuff
        run: ls -lAR -I ".git" -I "src"
      - name: Upload Rakudo-Star Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: dist/*
          if-no-files-found: error
      
  release_Rakudo-Star_artifacts:
    needs: [build_Rakudo-Star_Windows_MSI_package, build_Rakudo-Star_Linux_source]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: Rakudo-Star_artifacts
    - name: List my stuff
      run: ls -lAR
    - name: Import gpg key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        fingerprint: "3E7E3C6EAF916676AC549285A2919382E961E2EE"
    - name: Sign files and create checksums
      run: |
        for X in Rakudo-Star_artifacts/output/rakudo-star-* Rakudo-Star_artifacts/output/Windows/rakudo-star-* ; do
          gpg2 --detach-sign --armor -u ${{ steps.import_gpg.outputs.fingerprint }} -- $X
          md5sum --tag ${X} >> ${X}.checksums.txt.unsigned
          sha1sum --tag ${X} >> ${X}.checksums.txt.unsigned
          sha224sum --tag ${X} >> ${X}.checksums.txt.unsigned
          sha256sum --tag ${X} >> ${X}.checksums.txt.unsigned
          sha384sum --tag ${X} >> ${X}.checksums.txt.unsigned
          sha512sum --tag ${X} >> ${X}.checksums.txt.unsigned
          gpg2 --clearsign --output ${X}.checksums.txt -u ${{ steps.import_gpg.outputs.fingerprint }} -- ${X}.checksums.txt.unsigned
          rm ${X}.checksums.txt.unsigned
        done
    - name: Release Rakudo-Star Windows MSI and Linux RSTAR releases
      uses: ncipollo/release-action@v1
      with:
        # ncipollo/release-action needs a tag! Either a usual "GIT TAG" or an dedicated TAG, see below!
        #tag: 2021.06 # set a TAG if you want a release to be build on GitHub _BUT_ do not provide a GIT TAG
        draft: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: "Rakudo-Star_artifacts/output/rakudo-star-*,Rakudo-Star_artifacts/output/Windows/rakudo-star-*"
        token: ${{ secrets.GITHUB_TOKEN }}
        

